{
  "address": "0xE2b5359Ef857dCd2CF3274962895967Cb447888E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Marketplace.Currency",
          "name": "payableCurrency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAuction",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        }
      ],
      "name": "ListingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Marketplace.Currency",
              "name": "payableCurrency",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isAuction",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "highestBidder",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Marketplace.Listing",
          "name": "listing",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBid",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatedPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "auctionCancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Marketplace.Currency",
          "name": "payableCurrency",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isAuction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "biddingTime",
          "type": "uint256"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Marketplace.Currency",
          "name": "payableCurrency",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isAuction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeERC20Stuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "removeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royalties",
      "outputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payoutAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payoutAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "setNFTCollectionRoyalty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd680f307754f0a46e838c7b4f67e71f56d14dfff2d6f9f5d67cda4741a68ced3",
  "receipt": {
    "to": null,
    "from": "0x7bc0d5351940bfCE986e72A94E91eB9f76f8343b",
    "contractAddress": "0xE2b5359Ef857dCd2CF3274962895967Cb447888E",
    "transactionIndex": 0,
    "gasUsed": "1934943",
    "logsBloom": "0x
    "blockHash": "0xf2ed17378399bbfae6e462969ed6a71744c1aced483a34913bb9a5fc00e4f251",
    "transactionHash": "0xd680f307754f0a46e838c7b4f67e71f56d14dfff2d6f9f5d67cda4741a68ced3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11150853,
        "transactionHash": "0xd680f307754f0a46e838c7b4f67e71f56d14dfff2d6f9f5d67cda4741a68ced3",
        "address": "0xE2b5359Ef857dCd2CF3274962895967Cb447888E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007bc0d5351940bfce986e72a94e91eb9f76f8343b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf2ed17378399bbfae6e462969ed6a71744c1aced483a34913bb9a5fc00e4f251"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11150853,
        "transactionHash": "0xd680f307754f0a46e838c7b4f67e71f56d14dfff2d6f9f5d67cda4741a68ced3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007bc0d5351940bfce986e72a94e91eb9f76f8343b",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ce3a9cb944d4000000000000000000000000000000000000000000000000001a0b55cce9acc94900000000000000000000000000000000000000000000023be07054336be7cbb6000000000000000000000000000000000000000000000000193d1b303067f54900000000000000000000000000000000000000000000023be13e8ed0252c9fb6",
        "logIndex": 1,
        "blockHash": "0xf2ed17378399bbfae6e462969ed6a71744c1aced483a34913bb9a5fc00e4f251"
      }
    ],
    "blockNumber": 11150853,
    "cumulativeGasUsed": "1934943",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x41E94Eb019C0762f9Bfcf9Fb1E58725BfB0e7582"
  ],
  "numDeployments": 1,
  "solcInputHash": "655e6166cc679e528fe012a456940dcd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Marketplace.Currency\",\"name\":\"payableCurrency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Marketplace.Currency\",\"name\":\"payableCurrency\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Marketplace.Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBid\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatedPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"auctionCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Marketplace.Currency\",\"name\":\"payableCurrency\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"biddingTime\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Marketplace.Currency\",\"name\":\"payableCurrency\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeERC20Stuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"setNFTCollectionRoyalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Marketplace is ReentrancyGuard, Ownable {\\n    // * State\\n    uint256 private listingIds; // Replaces the Counters.Counter\\n\\n    enum Currency {\\n        NativeToken,\\n        USDCToken\\n    }\\n\\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => Royalties) public royalties; // Royalty information by collection address.\\n\\n    uint256 private constant BPS = 10000;\\n    address public immutable USDC;\\n\\n    // * Structs\\n    // Single NFT listing\\n    struct Listing {\\n        address nftContract;\\n        uint256 nftId;\\n        address payable seller;\\n        uint256 price;\\n        Currency payableCurrency;\\n        bool isAuction;\\n        uint256 date;\\n        address highestBidder;\\n    }\\n\\n    // Royalty Info\\n    struct Royalties {\\n        address _nftContract;\\n        address payoutAccount;\\n        uint256 royaltyAmount;\\n        bool exists;\\n    }\\n\\n    // * Events\\n    event ListingCreated(\\n        uint256 listingId,\\n        address indexed nftContract,\\n        uint256 indexed nftId,\\n        address seller,\\n        uint256 price,\\n        Currency payableCurrency,\\n        bool isAuction,\\n        uint256 date,\\n        address highestBidder\\n    );\\n    event Purchase(uint256 indexed itemId, address buyer, uint256 price);\\n    event UpdatedPrice(uint256 indexed itemId, address owner, uint256 price);\\n    event NewBid(address buyer, Listing listing, uint256 newBid);\\n\\n    // * Modifiers\\n    modifier Owned(uint256 listingId) {\\n        Listing memory item = listings[listingId];\\n        address ownerOfToken = IERC721(item.nftContract).ownerOf(item.nftId);\\n\\n        require(ownerOfToken == msg.sender, \\\"You don't own this NFT!\\\");\\n        _;\\n    }\\n\\n    // * Constructor\\n    constructor(address _usdcAddress) Ownable(msg.sender) {\\n        USDC = _usdcAddress;\\n    }\\n\\n    // * Create Listing\\n    function createListing(\\n        address nftContract,\\n        uint256 nftId,\\n        uint256 price,\\n        Currency payableCurrency,\\n        bool isAuction,\\n        uint256 biddingTime\\n    ) public nonReentrant {\\n        require(price > 0, \\\"Price must be greater than 0.\\\");\\n        address nftOwner = IERC721(nftContract).ownerOf(nftId);\\n        require(nftOwner == msg.sender, \\\"You can't sell an NFT you don't own!\\\");\\n        if (isAuction) {\\n            require(biddingTime > 0, \\\"Auctions must have a valid date\\\");\\n        }\\n\\n        listingIds++; // Increment listing ID\\n        uint256 itemId = listingIds;\\n        uint256 auctionDate = block.timestamp + biddingTime;\\n\\n        listings[itemId] = Listing(\\n            nftContract, nftId, payable(msg.sender), price, payableCurrency, isAuction, auctionDate, payable(address(0))\\n        );\\n        emit ListingCreated(\\n            itemId, nftContract, nftId, msg.sender, price, payableCurrency, isAuction, auctionDate, address(0)\\n        );\\n    }\\n\\n    // IERC20 buy function\\n    function buy(uint256 listingId) public payable nonReentrant {\\n        Listing memory item = listings[listingId];\\n        address contractAddress = item.nftContract;\\n        address nftSeller = item.seller;\\n        uint256 nftId = item.nftId;\\n        uint256 price = item.price;\\n        Currency payableCurrency = item.payableCurrency;\\n        uint256 baseRoyalty = royalties[contractAddress].royaltyAmount;\\n        address royaltyReceiver = royalties[contractAddress].payoutAccount;\\n        require(msg.sender != nftSeller, \\\"You cannot buy an NFT you are selling.\\\");\\n        require(contractAddress != address(0), \\\"Listing does not exist.\\\");\\n        require(!item.isAuction, \\\"This listing is designated for auction.\\\");\\n\\n        require(msg.value >= price, \\\"Please submit asking price to complete purchase\\\");\\n\\n        // Transfer NFT to the buyer\\n        IERC721(contractAddress).safeTransferFrom(nftSeller, msg.sender, nftId);\\n        // Transfer sale proceeds to seller, minus royalty\\n        if (payableCurrency == Currency.USDCToken) {\\n            IERC20(USDC).transferFrom(msg.sender, nftSeller, price - ((price * baseRoyalty) / BPS)); // price - royalty\\n            // Transfer royalty to the royalty receiver\\n            IERC20(USDC).transferFrom(msg.sender, royaltyReceiver, (price * baseRoyalty) / BPS); // just royalty\\n        } else {\\n            // Implement AggregatorV3Interface to convert the USD value to the native token equivalent value\\n        }\\n\\n        emit Purchase(listingId, msg.sender, price);\\n    }\\n\\n    // * Get current listing price\\n    function getPrice(uint256 listingId) public view returns (uint256) {\\n        return listings[listingId].price;\\n    }\\n\\n    // * Update listing price, listing cannot be on auction.\\n    function updatePrice(uint256 listingId, uint256 newPrice) public Owned(listingId) {\\n        require(!listings[listingId].isAuction, \\\"Auction starting prices cannot be updated\\\");\\n\\n        // Set new price\\n        listings[listingId].price = newPrice;\\n\\n        emit UpdatedPrice(listingId, msg.sender, newPrice);\\n    }\\n\\n    // * New bid and return funds to previous bidder\\n    function bid(uint256 listingId, uint256 amount) public payable nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        uint256 currentBid = listing.price;\\n        address highestBidder = listing.highestBidder;\\n        Currency payableCurrency = listing.payableCurrency;\\n        require(msg.sender != listing.seller, \\\"You cannot bid on an NFT you are selling.\\\");\\n        require(listing.isAuction, \\\"This listing is not an auction\\\");\\n        require(block.timestamp < listing.date, \\\"Auction has already ended\\\");\\n        require(amount > listing.price, \\\"Bid must be greater than the previous bid.\\\");\\n\\n        if (payableCurrency == Currency.USDCToken) {\\n            // Escrow payment in the marketplace contract\\n            IERC20(USDC).transferFrom(msg.sender, address(this), amount);\\n            // Transfer current bid back to previous bidder if applicable\\n            if (listing.highestBidder != address(0)) {\\n                IERC20(USDC).transfer(highestBidder, currentBid);\\n            }\\n        } else {\\n            // Implement AggregatorV3Interface to convert the USD value to the native token equivalent value\\n        }\\n        // Update to new bid values\\n        listing.highestBidder = msg.sender;\\n        listing.price = amount;\\n\\n        emit NewBid(msg.sender, listing, amount);\\n    }\\n\\n    // * Withdraw\\n    function withdraw(uint256 listingId) public nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        address contractAddress = listing.nftContract;\\n        uint256 nftId = listing.nftId;\\n        address nftSeller = listing.seller;\\n        address highestBidder = listing.highestBidder;\\n        uint256 endBid = listing.price;\\n        uint256 baseRoyalty = royalties[contractAddress].royaltyAmount;\\n        address royaltyReceiver = royalties[contractAddress].payoutAccount;\\n        Currency payableCurrency = listing.payableCurrency;\\n        uint256 sellerAmount = endBid - ((endBid * baseRoyalty) / BPS);\\n        uint256 royaltyRecAmount = (endBid * baseRoyalty) / BPS;\\n        require(\\n            msg.sender == nftSeller || msg.sender == highestBidder, \\\"Only the seller or highest bidder can withdraw.\\\"\\n        );\\n\\n        IERC721(contractAddress).safeTransferFrom(nftSeller, highestBidder, nftId);\\n        if (payableCurrency == Currency.USDCToken) {\\n            IERC20(USDC).transfer(nftSeller, sellerAmount);\\n            IERC20(USDC).transfer(royaltyReceiver, royaltyRecAmount);\\n        } else {\\n            // Implement AggregatorV3Interface to convert the USD value to the native token equivalent value\\n        }\\n\\n        // Update listing status\\n        listing.isAuction = false;\\n\\n        emit Purchase(listingId, highestBidder, endBid);\\n    }\\n\\n    // * Auction Cancel\\n    function auctionCancel(uint256 listingId) public Owned(listingId) nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        require(block.timestamp < listing.date, \\\"Auction has already ended\\\");\\n        // If there is a highestBidder, transfer their bid back\\n        if (listing.highestBidder != address(0)) {\\n            payable(listing.highestBidder).transfer(listing.price);\\n        }\\n\\n        delete listings[listingId];\\n    }\\n\\n    // * Remove Listing\\n    function removeListing(uint256 listingId) public Owned(listingId) {\\n        Listing storage listing = listings[listingId];\\n        require(listing.seller == msg.sender, \\\"You do not own this listing.\\\");\\n        require(!listing.isAuction, \\\"You cannot remove an active auction\\\");\\n\\n        delete listings[listingId];\\n    }\\n\\n    // ============ UTILITIES ==============\\n\\n    // * Set Royalty info\\n    function setNFTCollectionRoyalty(address contractAddress, address payoutAccount, uint256 royaltyAmount)\\n        public\\n        returns (bool)\\n    {\\n        require(!royalties[contractAddress].exists, \\\"Collection already has royalty info set.\\\");\\n        require(royaltyAmount > 0 && royaltyAmount <= 5000, \\\"Please set a royalty amount between 0.01% and 50%\\\");\\n        require(payoutAccount != address(0), \\\"Royalties should not be burned.\\\");\\n        // Set royalties\\n        royalties[contractAddress] = Royalties(contractAddress, payoutAccount, royaltyAmount, true);\\n\\n        return true;\\n    }\\n\\n    // * Remove ERC20 from contract\\n    function removeERC20Stuck(address to, IERC20 currency, uint256 amount) public onlyOwner {\\n        IERC20(currency).transfer(to, amount);\\n    }\\n\\n    // ========= Receive =============\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x79c47b02495501cd723ee55ba548dc02494fdbdc60197088a9d78f464f785292\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161226338038061226383398101604081905261002f916100c7565b6001600055338061005a57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006381610075565b506001600160a01b03166080526100f7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100d957600080fd5b81516001600160a01b03811681146100f057600080fd5b9392505050565b60805161212761013c600039600081816101f4015281816105e20152818161067601528181610e2f01528181610ee5015281816116e1015261179501526121276000f3fe6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063de74e57b11610059578063de74e57b146102fe578063e757223014610386578063f2fde38b146103c5578063f8050d59146103e557600080fd5b80638da5cb5b1461022e5780639fa6b4a01461024c578063d96a094a146102cb578063dd3e4853146102de57600080fd5b806365af3c93116100c657806365af3c9314610178578063715018a6146101ad57806382367b2d146101c257806389a30271146101e257600080fd5b80632e1a7d4d146101035780633af826a414610125578063479ad4c314610145578063598647f81461016557600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004611d21565b610405565b005b34801561013157600080fd5b50610123610140366004611d21565b61074e565b34801561015157600080fd5b50610123610160366004611d21565b6109c7565b610123610173366004611d3a565b610c52565b34801561018457600080fd5b50610198610193366004611d71565b610fbe565b60405190151581526020015b60405180910390f35b3480156101b957600080fd5b50610123611194565b3480156101ce57600080fd5b506101236101dd366004611d3a565b6111a8565b3480156101ee57600080fd5b506102167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a4565b34801561023a57600080fd5b506001546001600160a01b0316610216565b34801561025857600080fd5b5061029e610267366004611db2565b60046020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169160ff1684565b604080516001600160a01b03958616815294909316602085015291830152151560608201526080016101a4565b6101236102d9366004611d21565b6113d5565b3480156102ea57600080fd5b506101236102f9366004611d71565b611883565b34801561030a57600080fd5b50610372610319366004611d21565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006909501546001600160a01b0394851696939593851694929360ff80841694610100909404169290911688565b6040516101a4989796959493929190611e0e565b34801561039257600080fd5b506103b76103a1366004611d21565b6000908152600360208190526040909120015490565b6040519081526020016101a4565b3480156103d157600080fd5b506101236103e0366004611db2565b6118fe565b3480156103f157600080fd5b50610123610400366004611e78565b611939565b61040d611c78565b600081815260036020818152604080842080546001808301546002808501546006860154988601546001600160a01b03958616808c526004998a9052978b209283015492909401549786015495999698929790851696928516959394919391169160ff909116906127106104818587611ef9565b61048b9190611f16565b6104959086611f38565b905060006127106104a68688611ef9565b6104b09190611f16565b9050336001600160a01b03891614806104d15750336001600160a01b038816145b61053a5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79207468652073656c6c6572206f72206869676865737420626964646560448201526e391031b0b7103bb4ba34323930bb9760891b60648201526084015b60405180910390fd5b604051632142170760e11b81526001600160a01b038b16906342842e0e9061056a908b908b908e90600401611f4b565b600060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b50600192506105a5915050565b8360018111156105b7576105b7611dd6565b036106e55760405163a9059cbb60e01b81526001600160a01b038981166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190611f6f565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190611f6f565b505b60048b01805461ff0019169055604080516001600160a01b0389168152602081018890528d917f9b9322562a425e363b0c2f80fc966e9c4f48ac3b5c2d1527d75829c8f505ec96910160405180910390a2505050505050505050505061074b6001600055565b50565b600081815260036020818152604080842081516101008101835281546001600160a01b039081168252600180840154958301959095526002830154169281019290925292830154606082015260048301548594939192608084019160ff16908111156107bc576107bc611dd6565b60018111156107cd576107cd611dd6565b815260048281015460ff61010090910416151560208084019190915260058401546040808501919091526006909401546001600160a01b0390811660609094019390935284519085015193516331a9108f60e11b8152949550600094921692636352211e92610840920190815260200190565b602060405180830381865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108819190611f8c565b90506001600160a01b03811633146108ab5760405162461bcd60e51b815260040161053190611fa9565b6108b3611c78565b6000848152600360205260409020600581015442106109105760405162461bcd60e51b8152602060048201526019602482015278105d58dd1a5bdb881a185cc8185b1c9958591e48195b991959603a1b6044820152606401610531565b60068101546001600160a01b03161561096557600681015460038201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610963573d6000803e3d6000fd5b505b506000848152600360208190526040822080546001600160a01b0319908116825560018083018590556002830180548316905592820184905560048201805461ffff191690556005820184905560069091018054909116905590555b50505050565b600081815260036020818152604080842081516101008101835281546001600160a01b039081168252600180840154958301959095526002830154169281019290925292830154606082015260048301548594939192608084019160ff1690811115610a3557610a35611dd6565b6001811115610a4657610a46611dd6565b815260048281015460ff61010090910416151560208084019190915260058401546040808501919091526006909401546001600160a01b0390811660609094019390935284519085015193516331a9108f60e11b8152949550600094921692636352211e92610ab9920190815260200190565b602060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa9190611f8c565b90506001600160a01b0381163314610b245760405162461bcd60e51b815260040161053190611fa9565b600084815260036020526040902060028101546001600160a01b03163314610b8e5760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206f776e2074686973206c697374696e672e000000006044820152606401610531565b6004810154610100900460ff1615610bf45760405162461bcd60e51b815260206004820152602360248201527f596f752063616e6e6f742072656d6f766520616e20616374697665206175637460448201526234b7b760e91b6064820152608401610531565b505050600091825250600360208190526040822080546001600160a01b03199081168255600182018490556002820180548216905591810183905560048101805461ffff191690556005810192909255600690910180549091169055565b610c5a611c78565b6000828152600360208190526040909120908101546006820154600483015460028401546001600160a01b039283169260ff90921691163303610cf15760405162461bcd60e51b815260206004820152602960248201527f596f752063616e6e6f7420626964206f6e20616e204e465420796f75206172656044820152681039b2b63634b7339760b91b6064820152608401610531565b6004840154610100900460ff16610d4a5760405162461bcd60e51b815260206004820152601e60248201527f54686973206c697374696e67206973206e6f7420616e2061756374696f6e00006044820152606401610531565b83600501544210610d995760405162461bcd60e51b8152602060048201526019602482015278105d58dd1a5bdb881a185cc8185b1c9958591e48195b991959603a1b6044820152606401610531565b83600301548511610dff5760405162461bcd60e51b815260206004820152602a60248201527f426964206d7573742062652067726561746572207468616e20746865207072656044820152693b34b7bab9903134b21760b11b6064820152608401610531565b6001816001811115610e1357610e13611dd6565b03610f54576040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610e6890339030908a90600401611f4b565b6020604051808303816000875af1158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190611f6f565b5060068401546001600160a01b031615610f545760405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f529190611f6f565b505b6006840180546001600160a01b03191633908117909155600385018690556040517f5cb5ae25865fa1422f829e0cc84537813538acc2206c4b76c2c63153e8e87ebb91610fa49187908990611fe0565b60405180910390a150505050610fba6001600055565b5050565b6001600160a01b03831660009081526004602052604081206003015460ff161561103b5760405162461bcd60e51b815260206004820152602860248201527f436f6c6c656374696f6e20616c72656164792068617320726f79616c747920696044820152673733379039b2ba1760c11b6064820152608401610531565b60008211801561104d57506113888211155b6110b35760405162461bcd60e51b815260206004820152603160248201527f506c6561736520736574206120726f79616c747920616d6f756e74206265747760448201527065656e20302e30312520616e642035302560781b6064820152608401610531565b6001600160a01b0383166111095760405162461bcd60e51b815260206004820152601f60248201527f526f79616c746965732073686f756c64206e6f74206265206275726e65642e006044820152606401610531565b50604080516080810182526001600160a01b0394851680825293851660208083019182528284019485526001606084018181526000978852600490925293909520915182549087166001600160a01b031991821617835590518284018054919097169116179094559051600284015590516003909201805492151560ff199093169290921790915590565b61119c611ca2565b6111a66000611ccf565b565b600082815260036020818152604080842081516101008101835281546001600160a01b039081168252600180840154958301959095526002830154169281019290925292830154606082015260048301548694939192608084019160ff169081111561121657611216611dd6565b600181111561122757611227611dd6565b815260048281015460ff61010090910416151560208084019190915260058401546040808501919091526006909401546001600160a01b0390811660609094019390935284519085015193516331a9108f60e11b8152949550600094921692636352211e9261129a920190815260200190565b602060405180830381865afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db9190611f8c565b90506001600160a01b03811633146113055760405162461bcd60e51b815260040161053190611fa9565b600085815260036020526040902060040154610100900460ff161561137e5760405162461bcd60e51b815260206004820152602960248201527f41756374696f6e207374617274696e67207072696365732063616e6e6f74206260448201526819481d5c19185d195960ba1b6064820152608401610531565b600085815260036020818152604092839020909101869055815133815290810186905286917fa31afe7e1095ff5691002b0fc0eaaf501f18b562b88369b0acf5d4e670d7426f910160405180910390a25050505050565b6113dd611c78565b600081815260036020818152604080842081516101008101835281546001600160a01b03908116825260018084015495830195909552600283015416928101929092529283015460608201526004830154909291608084019160ff169081111561144957611449611dd6565b600181111561145a5761145a611dd6565b8152600482810154610100900460ff16151560208084019190915260058401546040808501919091526006909401546001600160a01b03908116606094850152855186860151878401519588015160808901518385166000908152969095529690942060028101546001909101549798509096939593909190811690861633036115355760405162461bcd60e51b815260206004820152602660248201527f596f752063616e6e6f742062757920616e204e465420796f7520617265207365604482015265363634b7339760d11b6064820152608401610531565b6001600160a01b03871661158b5760405162461bcd60e51b815260206004820152601760248201527f4c697374696e6720646f6573206e6f742065786973742e0000000000000000006044820152606401610531565b8760a00151156115ed5760405162461bcd60e51b815260206004820152602760248201527f54686973206c697374696e672069732064657369676e6174656420666f7220616044820152663ab1ba34b7b71760c91b6064820152608401610531565b833410156116555760405162461bcd60e51b815260206004820152602f60248201527f506c65617365207375626d69742061736b696e6720707269636520746f20636f60448201526e6d706c65746520707572636861736560881b6064820152608401610531565b604051632142170760e11b81526001600160a01b038816906342842e0e9061168590899033908a90600401611f4b565b600060405180830381600087803b15801561169f57600080fd5b505af11580156116b3573d6000803e3d6000fd5b50600192506116c0915050565b8360018111156116d2576116d2611dd6565b03611836576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3388612710611715878a611ef9565b61171f9190611f16565b6117299089611f38565b6040518463ffffffff1660e01b815260040161174793929190611f4b565b6020604051808303816000875af1158015611766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178a9190611f6f565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33836127106117c9878a611ef9565b6117d39190611f16565b6040518463ffffffff1660e01b81526004016117f193929190611f4b565b6020604051808303816000875af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190611f6f565b505b60408051338152602081018690528a917f9b9322562a425e363b0c2f80fc966e9c4f48ac3b5c2d1527d75829c8f505ec96910160405180910390a2505050505050505061074b6001600055565b61188b611ca2565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af11580156118da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190611f6f565b611906611ca2565b6001600160a01b03811661193057604051631e4fbdf760e01b815260006004820152602401610531565b61074b81611ccf565b611941611c78565b600084116119915760405162461bcd60e51b815260206004820152601d60248201527f5072696365206d7573742062652067726561746572207468616e20302e0000006044820152606401610531565b6040516331a9108f60e11b8152600481018690526000906001600160a01b03881690636352211e90602401602060405180830381865afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190611f8c565b90506001600160a01b0381163314611a635760405162461bcd60e51b8152602060048201526024808201527f596f752063616e27742073656c6c20616e204e465420796f7520646f6e2774206044820152636f776e2160e01b6064820152608401610531565b8215611ab95760008211611ab95760405162461bcd60e51b815260206004820152601f60248201527f41756374696f6e73206d757374206861766520612076616c69642064617465006044820152606401610531565b60028054906000611ac983612074565b90915550506002546000611add844261208d565b90506040518061010001604052808a6001600160a01b03168152602001898152602001336001600160a01b03168152602001888152602001876001811115611b2757611b27611dd6565b8152861515602080830191909152604080830185905260006060938401819052868152600380845290829020855181546001600160a01b03199081166001600160a01b0392831617835594870151600180840191909155938701516002830180549096169116179093559284015192820192909255608083015160048201805492939192909160ff19909116908381811115611bc557611bc5611dd6565b021790555060a082015160048201805461ff0019166101009215159290920291909117905560c0820151600582015560e090910151600690910180546001600160a01b0319166001600160a01b0392831617905560405189918b16907f7802718a2731045d6791e286eea48cb7ee3321ac77421fe8686dca488e70011890611c5b90869033908d908d908d908a906000906120a0565b60405180910390a3505050611c706001600055565b505050505050565b600260005403611c9b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001546001600160a01b031633146111a65760405163118cdaa760e01b8152336004820152602401610531565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215611d3357600080fd5b5035919050565b60008060408385031215611d4d57600080fd5b50508035926020909101359150565b6001600160a01b038116811461074b57600080fd5b600080600060608486031215611d8657600080fd5b8335611d9181611d5c565b92506020840135611da181611d5c565b929592945050506040919091013590565b600060208284031215611dc457600080fd5b8135611dcf81611d5c565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60028110611e0a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0389811682526020820189905287166040820152606081018690526101008101611e426080830187611dec565b93151560a082015260c08101929092526001600160a01b031660e09091015295945050505050565b801515811461074b57600080fd5b60008060008060008060c08789031215611e9157600080fd5b8635611e9c81611d5c565b95506020870135945060408701359350606087013560028110611ebe57600080fd5b92506080870135611ece81611e6a565b9598949750929591949360a090920135925050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611f1057611f10611ee3565b92915050565b600082611f3357634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611f1057611f10611ee3565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611f8157600080fd5b8151611dcf81611e6a565b600060208284031215611f9e57600080fd5b8151611dcf81611d5c565b60208082526017908201527f596f7520646f6e2774206f776e2074686973204e465421000000000000000000604082015260600190565b6001600160a01b038481168252835416602082015261014081016001840154604083015260028401546001600160a01b0316606083015260038401546080830152600484015461203660a0840160ff8316611dec565b61204a60c0840160ff8360081c1615159052565b50600584015460e08301526006909301546001600160a01b03166101008201526101200152919050565b60006001820161208657612086611ee3565b5060010190565b80820180821115611f1057611f10611ee3565b8781526001600160a01b03871660208201526040810186905260e081016120ca6060830187611dec565b931515608082015260a08101929092526001600160a01b031660c09091015294935050505056fea26469706673582212202617c787a135dae7c08583024d6ff4a7318b7f3c226c5f1d4a0153c7f042095c64736f6c634300081a0033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1135,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1217,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listingIds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1225,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Listing)1253_storage)"
      },
      {
        "astId": 1230,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "royalties",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Royalties)1262_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Currency)1220": {
        "encoding": "inplace",
        "label": "enum Marketplace.Currency",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Royalties)1262_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Marketplace.Royalties)",
        "numberOfBytes": "32",
        "value": "t_struct(Royalties)1262_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)1253_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)1253_storage"
      },
      "t_struct(Listing)1253_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Listing",
        "members": [
          {
            "astId": 1237,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "nftContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1239,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1241,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 1243,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1246,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "payableCurrency",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Currency)1220"
          },
          {
            "astId": 1248,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "isAuction",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1250,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1252,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "highestBidder",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Royalties)1262_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Royalties",
        "members": [
          {
            "astId": 1255,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_nftContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1257,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "payoutAccount",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1259,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "royaltyAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1261,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}